import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { AngularFirestore } from '@angular/fire/compat/firestore';
import { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';
import { HELPERS } from '../../../../shared/constants/helpers';
import { Product } from '../../../../shared/constants/models/product.model';
import { FirebaseDataService } from '../../../../shared/services/firebase/data.firebase.service';
import { ToastService } from '../../../../shared/services/toast.service';

@Component({
  selector: 'app-products-edit-form',
  templateUrl: './products-edit-form.component.html',
  styleUrls: ['./products-edit-form.component.css'],
})
/**
 * Component to edit, update, delete or create a new product.
 */
export class ProductsEditFormComponent implements OnInit {
  /* Product data received from parent list */
  @Input('product') productData!: Product;

  /* Event emitter for change detection: For Create, Update and Delete */
  @Output('somethingChanged') changed: EventEmitter<any>;

  /* Form to edit product */
  editProductForm!: FormGroup;

  /* Object to hold the loading state for update and delete operations */
  loading = {
    update: false,
    del: false,
  };

  categories = [
    'electronics',
    'jewelery',
    "men's clothing",
    "women's clothing",
  ];

  constructor(
    private _data: FirebaseDataService,
    private _toast: ToastService,
    private _firestore: AngularFirestore
  ) {
    this.changed = new EventEmitter<any>();
  }

  get relatedImages() {
    return (<FormArray>this.editProductForm.get('relatedImages')).controls;
  }

  onDeleteImage(index: number) {
    (<FormArray>this.editProductForm.get('relatedImages')).removeAt(index);
  }

  onAddImage() {
    (<FormArray>this.editProductForm.get('relatedImages')).push(
      new FormGroup({
        url: new FormControl(null, Validators.required),
      })
    );
  }

  /**
   * Method to update or add a new product based on productData property.
   */
  onSubmit() {
    // Get the product id
    let id = this.editProductForm.get('id')?.value;
    // For a new product, generate ID
    if (id === HELPERS.text.autoGenerated) {
      id = this._firestore.createId();
    }
    // Store the related images in an array
    let relatedImages = this.editProductForm
      .get('relatedImages')
      ?.value.map((image: { url: string }) => image.url);

    // Store all the images
    const images = [this.editProductForm.get('image')?.value, ...relatedImages];
    const updatedProduct = {
      title: this.editProductForm.get('title')?.value,
      id: id,
      // Default values for rating
      rating: this.productData?.rating.rate
        ? this.productData.rating
        : { rate: 0, count: 0 },
      image: images,
      description: this.editProductForm.get('description')?.value,
      category: this.editProductForm.get('category')?.value,
      disabled: this.editProductForm.get('disabled')?.value,
      stock: this.editProductForm.get('stock')?.value,
      price: this.editProductForm.get('price')?.value,
    };

    // Disable form while the update is in progress.
    this.editProductForm.disable();
    // Start update loading
    this.loading.update = true;
    // Update the Product data
    this._data
      .updateProduct({
        ...updatedProduct,
      })
      .subscribe({
        next: () => {
          // If this is an update
          if (this.productData)
            this._toast.showSuccessToast('Data Updated for ' + id);
          // If a new product is added
          else {
            this._toast.showSuccessToast('Created Product ' + id);
            this.editProductForm.reset();
          }
          // Change the lading and form states
          this.loading.update = false;
          this.editProductForm.enable();
          // Emit a change event to fetch data again
          this.changed.emit();
        },
        error: (error) => {
          // Show an error toast
          this._toast.showErrorToast(error.message);
          // Change the lading and form states
          this.loading.update = false;
          this.editProductForm.enable();
        },
      });
  }

  ngOnInit(): void {
    this.updateUI();
  }

  /**
   * Method to delete a product
   */
  onDelete() {
    // Ask for confirmation
    const confirmation = confirm(
      'Product deletion is irreversible, are you sure?'
    );

    if (confirmation) {
      // Start delete loader
      this.loading.del = true;
      this._data.deleteProduct(this.productData.id).subscribe({
        next: () => {
          this._toast.showSuccessToast(this.productData.id + ' deleted.');
          // Stop delete loader
          this.loading.del = false;
          // Emit a change event to fetch the data again
          this.changed.emit();
        },
        error: (e) => {
          // Show an error toast with error message
          this._toast.showErrorToast(e.message);
          // Stop delete loader
          this.loading.del = false;
        },
      });
    }
  }

  /**
   * Method to set up form based on productData property
   * @private
   */
  private updateUI() {
    // If productData exists -> Edit Form
    if (this.productData) {
      let relatedImages: FormArray = new FormArray<
        FormGroup<{ url: FormControl }>
      >([]);
      if (this.productData.image.length > 1) {
        for (let image of this.productData.image.slice(
          1,
          this.productData.image.length
        )) {
          relatedImages.push(
            new FormGroup({
              url: new FormControl(image, Validators.required),
            })
          );
        }
      }
      this.editProductForm = new FormGroup({
        // Disable product id
        id: new FormControl(
          {
            value: this.productData.id,
            disabled: true,
          },
          [Validators.required]
        ),
        title: new FormControl(this.productData.title, [Validators.required]),
        description: new FormControl(this.productData.description, [
          Validators.required,
        ]),
        category: new FormControl(this.productData.category, [
          Validators.required,
        ]),
        price: new FormControl(this.productData.price, [Validators.required]),
        image: new FormControl(this.productData.image[0], [
          Validators.required,
        ]),
        relatedImages: relatedImages,
        stock: new FormControl(this.productData.stock, [Validators.required]),
        disabled: new FormControl(!!this.productData?.disabled, [
          Validators.required,
        ]),
      });
    }
    // New product form
    else
      this.editProductForm = new FormGroup({
        // Disable product id with a default value, id will be auto generated when submitting the form
        id: new FormControl(
          {
            value: HELPERS.text.autoGenerated,
            disabled: true,
          },
          [Validators.required]
        ),
        title: new FormControl(null, [Validators.required]),
        description: new FormControl(null, [Validators.required]),
        category: new FormControl('', [Validators.required]),
        price: new FormControl(null, [Validators.required]),
        image: new FormControl(null, [Validators.required]),
        relatedImages: new FormArray([]),
        stock: new FormControl(true, [Validators.required]),
        disabled: new FormControl(false, [Validators.required]),
      });
  }
}
